package text

import (
	"fmt"
	"github.com/go-telegram/bot/models"
)

type Messages struct {
	Start              map[string]string                       //Sent on /start command
	Help               map[string]string                       //Sent on /help command
	Lang               map[string]string                       //Sent when prompting user to choose the language
	Level              map[string]string                       //Sent when prompting user to choose language level (e.g. A1)
	PreferencesSet     map[string]string                       //Sent after user finishes set up
	UnknownCommand     map[string]string                       //Sent when receiving unknown command
	ResponseMsg        map[string]string                       //Sent when sending generated sentences to the user
	TooLong            map[string]string                       //Sent when message exceeds maxMessageLen set in bot.go
	BadRequest         map[string]string                       //Sent when unable to make sentences due to word being inappropriate or not existing
	Premium            map[string]string                       //Sent when user uses /premium command if they don't have premium yet
	LimitReached       map[string]string                       //Sent when user reaches free limit of 50 sentences per day
	PremiumTitle       map[string]string                       //Title of the message with the invoice and text of premium inline
	SuccessfulPayment  map[string]string                       //Sent when payment is successful
	FailedPayment      map[string]string                       //Sent when payment has failed
	PreferencesNotSet  map[string]string                       //Sent when user tries to generate sentences without setting the preferences
	AlreadyPremium     map[string]func(int) string             //Sent when premium user tries to buy premium value is a function because of conjugation
	PremiumDescription map[string]string                       //Sent in the description of the invoice
	LanguageMarkup     map[string]*models.InlineKeyboardMarkup //Contains markup for inline keyboards with language
}

// Load returns a Message object with all the message in russian and english
func Load() *Messages {
	var msgs Messages
	msgs.Start = map[string]string{
		"ru": `
üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π! üéâ
–Ø –ø–æ–º–æ–≥—É –≤–∞–º —É—á–∏—Ç—å –Ω–æ–≤—ã–µ —Å–ª–æ–≤–∞, —Å–æ–∑–¥–∞–≤–∞—è –ø—Ä–∏–º–µ—Ä—ã –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–≤–µ–¥—ë–Ω–Ω—ã—Ö –≤–∞–º–∏ —Å–ª–æ–≤. –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Å–ª–æ–≤–æ, –∏ —è —Å–≥–µ–Ω–µ—Ä–∏—Ä—É—é –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, —á—Ç–æ–±—ã –≤—ã –º–æ–≥–ª–∏ —É–≤–∏–¥–µ—Ç—å –µ–≥–æ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ.
–ü–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /preferences, —á—Ç–æ–±—ã –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —è–∑—ã–∫ –∏ —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ ‚Äî —Ç–∞–∫ —è —Å–º–æ–≥—É –ø–æ–¥–±–∏—Ä–∞—Ç—å –¥–ª—è –≤–∞—Å –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–ª–µ–∑–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è.
–£–¥–∞—á–∏ –≤ –∏–∑—É—á–µ–Ω–∏–∏! üìö‚ú®`,
		"en": `
üëã Welcome to the Context Sentence Generator Bot! üéâ
I help you learn new words by generating example sentences based on the words you provide. Just send me a word, and I'll create sentences to help you understand it in context.
Before you start, use the /preferences command to set your language and difficulty level so I can generate the most useful sentences for you.
Happy learning! üìö‚ú®`,
	}
	msgs.Help = map[string]string{
		"ru": `
üìå –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
‚úÖ /preferences ‚Äì –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –∏ —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π.  
‚úÖ /help ‚Äì –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –∏ –∏—Ö –æ–ø–∏—Å–∞–Ω–∏–µ.  
‚úÖ /premium ‚Äì –ü–æ–ª—É—á–∏—Ç–µ –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π.  
–ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å? –ù–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ ‚Äì @dafraer`,
		"en": `
üìå Available Commands:
‚úÖ /preferences ‚Äì Set your language and difficulty level for personalized sentences.  
‚úÖ /help ‚Äì View this list of commands and their explanations.  
‚úÖ /premium ‚Äì Get unlimited sentence generation.
Need help? Just send me a message ‚Äì @dafraer`,
	}
	msgs.Lang = map[string]string{
		"ru": "üåç –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —è–∑—ã–∫–∞, –∫–æ—Ç–æ—Ä—ã–π –≤—ã –∏–∑—É—á–∞–µ—Ç–µ!",
		"en": "üåç Please select the language you are learning!",
	}
	msgs.Level = map[string]string{
		"ru": "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å —è–∑—ã–∫–∞ –¥–ª—è –≤–∞—à–∏—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π!",
		"en": "Please choose the language level for your sentences!",
	}
	msgs.PreferencesSet = map[string]string{
		"ru": `
–í—Å—ë –≥–æ—Ç–æ–≤–æ! ‚úÖ
–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–ª–æ–≤–∞, –¥–ª—è –∫–æ—Ç–æ—Ä—ã—Ö —Ö–æ—Ç–∏—Ç–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è. –ü—Ä–æ—Å—Ç–æ –≤–≤–æ–¥–∏—Ç–µ –∏—Ö –ø–æ –æ–¥–Ω–æ–º—É, –∏ —è –≤—Å—ë —Å–¥–µ–ª–∞—é!`,
		"en": `
Everything is set! ‚úÖ
Now you can send the words for which you‚Äôd like to generate sentences. Just type them in one by one, and I‚Äôll do the rest!`,
	}
	msgs.UnknownCommand = map[string]string{
		"ru": "Sorry, I don't know this command",
		"en": "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –∑–Ω–∞—é —Ç–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã",
	}
	msgs.ResponseMsg = map[string]string{
		//Response messages need escaping \ because they are parsed using telegram's Mark Down Parse mode
		"ru": "‚ö†Ô∏è –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ, —á—Ç–æ –ò–ò –º–æ–∂–µ—Ç –∏–Ω–æ–≥–¥–∞ –¥–æ–ø—É—Å–∫–∞—Ç—å –Ω–µ—Ç–æ—á–Ω–æ—Å—Ç–∏ –∏ –æ—à–∏–±–∫–∏\\.\n–í–æ—Ç –≤–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∏ –ø–µ—Ä–µ–≤–æ–¥ –Ω–∞ —Ä—É—Å—Å–∫–∏–π:\n``` %s```\n``` %s```",
		"en": "‚ö†Ô∏è Please note that AI may occasionally make inaccuracies and mistakes\\.\nHere is your sentence and english translation:\n``` %s```\n``` %s```",
	}
	msgs.TooLong = map[string]string{
		"ru": "Sorry, your word is too long",
		"en": "–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤–∞—à–µ —Å–ª–æ–≤–æ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ",
	}
	msgs.BadRequest = map[string]string{
		"ru": "‚ùå –ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –º–æ–≥—É —Å–æ—Å—Ç–∞–≤–∏—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å —ç—Ç–∏–º —Å–ª–æ–≤–æ–º. –û–Ω–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ—É–º–µ—Å—Ç–Ω—ã–º –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —è–∑—ã–∫–µ.",
		"en": "‚ùå Sorry, I can‚Äôt generate a sentence with that word. It may be inappropriate or not exist in the selected language.",
	}
	msgs.Premium = map[string]string{
		"ru": `
–ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ Premium –∏ –ø–æ–ª—É—á–∏—Ç–µ 30 –¥–Ω–µ–π –±–µ–∑–ª–∏–º–∏—Ç–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞!
–ì–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –∏ –ø–æ–¥–¥–µ—Ä–∂–∏—Ç–µ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞, –ø–æ–∫—Ä—ã–≤–∞—è —Ä–∞—Å—Ö–æ–¥—ã –Ω–∞ API. üíô
–û—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É —Å–µ–π—á–∞—Å –∏ —É–ª—É—á—à–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å –æ–±—É—á–µ–Ω–∏—è! ‚ú®`,
		"en": `
Go Premium for 30 Days of Unlimited Access!
Generate unlimited sentences and support the creator by covering API costs. üíô
Upgrade now and enhance your learning experience! ‚ú®`,
	}
	msgs.LimitReached = map[string]string{
		"ru": `
üö®–î–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç –∏—Å—á–µ—Ä–ø–∞–Ω!üö®
–í—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ 50 –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π. –•–æ—Ç–∏—Ç–µ –±–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π –¥–æ—Å—Ç—É–ø? 
–û—Ñ–æ—Ä–º–∏—Ç–µ Premium, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ –∏ –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –±–æ—Ç–∞! üíô`,
		"en": `
üö®Daily Limit Reached!üö®
You've used all 50 free sentences for today. Want unlimited access? 
Upgrade to Premium to keep learning and support the bot! üíô`,
	}
	msgs.PremiumTitle = map[string]string{
		"ru": "–ü–æ–¥–ø–∏—Å–∫–∞ Premium - 30 –¥–Ω–µ–π",
		"en": "Premium Subscription - 30 days",
	}
	msgs.SuccessfulPayment = map[string]string{
		"ru": `
‚úÖ –û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞! ‚úÖ
–¢–µ–ø–µ—Ä—å —É –≤–∞—Å –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É –Ω–∞ 30 –¥–Ω–µ–π. –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É! –ñ–µ–ª–∞—é –≤–∞–º —É—Å–ø–µ—Ö–æ–≤ –≤ –∏–∑—É—á–µ–Ω–∏–∏ —è–∑—ã–∫–æ–≤! üìö‚ú®`,
		"en": `
‚úÖ Payment successfully processed! ‚úÖ
You now have unlimited access for 30 days. Thank you for your support! Wishing you success in your language learning journey! üìö‚ú®`,
	}
	msgs.FailedPayment = map[string]string{
		"ru": "–ò–∑–≤–∏–Ω–∏—Ç–µ, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫.üòî –ù–∞–ø–∏—à–∏—Ç–µ @dafraer –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã",
		"en": "Sorry, something went wrong.üòî Write @dafraer to solve your issue",
	}
	msgs.PreferencesNotSet = map[string]string{
		"ru": "‚öôÔ∏è–°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –±–æ—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É—è –∫–æ–º–∞–Ω–¥—É /preferences! –ë–µ–∑ —ç—Ç–æ–≥–æ –±–æ—Ç –Ω–µ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å.",
		"en": "‚öôÔ∏èSet your preferences using /preferences command first! The bot won‚Äôt work until you do.",
	}
	msgs.AlreadyPremium = map[string]func(int) string{
		"ru": conjugateAlreadyPremiumMessageRu,
		"en": func(n int) string {
			return fmt.Sprintf(`
You're already a Premium user!üéâ
You currently have %d days of Premium access left. Thank you for supporting the bot! üíô  
Enjoy your unlimited sentence generation!`, n)
		},
	}
	msgs.PremiumDescription = map[string]string{
		"ru": "–û—Ç–∫—Ä–æ–π—Ç–µ –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π",
		"en": "Unlock unlimited sentence generation",
	}
	msgs.LanguageMarkup = map[string]*models.InlineKeyboardMarkup{
		"ru": &models.InlineKeyboardMarkup{
			InlineKeyboard: [][]models.InlineKeyboardButton{
				{
					{Text: "–ê–Ω–≥–ª–∏–π—Å–∫–∏–π", CallbackData: "en-US"},
				}, {
					{Text: "–ò—Å–ø–∞–Ω—Å–∫–∏–π", CallbackData: "es-ES"},
				}, {
					{Text: "–§—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π", CallbackData: "fr-FR"},
				}, {
					{Text: "–ù–µ–º–µ—Ü–∫–∏–π", CallbackData: "de-DE"},
				}, {
					{Text: "–¢—É—Ä–µ—Ü–∫–∏–π", CallbackData: "tr-TR"},
				}, {
					{Text: "–ì—Ä–µ—á–µ—Å–∫–∏–π", CallbackData: "el-GR"},
				}, {
					{Text: "–Ø–ø–æ–Ω—Å–∫–∏–π", CallbackData: "ja-JP"},
				}, {
					{Text: "–ö–æ—Ä–µ–π—Å–∫–∏–π", CallbackData: "ko-KR"},
				}, {
					{Text: "–ê—Ä–∞–±—Å–∫–∏–π", CallbackData: "ar-XA"},
				}, {
					{Text: "–ò—Ç–∞–ª—å—è–Ω—Å–∫–∏–π", CallbackData: "it-IT"},
				},
			},
		},
		"en": &models.InlineKeyboardMarkup{
			InlineKeyboard: [][]models.InlineKeyboardButton{
				{
					{Text: "Spanish", CallbackData: "es-ES"},
				}, {
					{Text: "French", CallbackData: "fr-FR"},
				}, {
					{Text: "German", CallbackData: "de-DE"},
				}, {
					{Text: "Turkish", CallbackData: "tr-TR"},
				}, {
					{Text: "Greek", CallbackData: "el-GR"},
				}, {
					{Text: "Russian", CallbackData: "ru-RU"},
				}, {
					{Text: "Japanese", CallbackData: "ja-JP"},
				}, {
					{Text: "Korean", CallbackData: "ko-KR"},
				}, {
					{Text: "Arabic", CallbackData: "ar-XA"},
				}, {
					{Text: "Italian", CallbackData: "it-IT"},
				},
			},
		},
	}
	return &msgs
}

// conjugateAlreadyPremiumMessageRu returns AlreadyPremium message with conjugated –¥–Ω–∏ word
func conjugateAlreadyPremiumMessageRu(daysAmount int) string {
	msg := `
–í—ã —É–∂–µ Premium –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å!üéâ  
–£ –≤–∞—Å %s %d %s –¥–æ—Å—Ç—É–ø–∞ –∫ Premium. –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É! üíô  
–ù–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—å –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π!`
	d := "–¥–Ω–µ–π"
	left := "–æ—Å—Ç–∞–ª–æ—Å—å"
	if daysAmount%10 == 1 {
		d = "–¥–µ–Ω—å"
		left = "–æ—Å—Ç–∞–ª—Å—è"
	} else if daysAmount%10 == 2 || daysAmount%10 == 3 || daysAmount%10 == 4 {
		d = "–¥–Ω—è"
	}
	preLastDigit := daysAmount % 100 / 10
	if preLastDigit == 1 {
		d = "–¥–Ω–µ–π"
		left = "–æ—Å—Ç–∞–ª–æ—Å—å"
	}
	return fmt.Sprintf(msg, left, daysAmount, d)
}
